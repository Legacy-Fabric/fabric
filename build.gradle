plugins {
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'fabric-loom' version "0.12-SNAPSHOT" apply false
	id 'org.cadixdev.licenser' version "0.6.1"
	id "org.ajoberstar.grgit" version "3.1.1"
	id 'com.matthewprenger.cursegradle' version "1.4.0"
	id 'signing'
}

def ENV = System.getenv()

setVersion("${project.base_version}+${project.mc_version}")
logger.lifecycle("Building Fabric: " + version)


import org.apache.commons.codec.digest.DigestUtils


def getSubprojectVersion(project, version) {
	if (grgit == null) {
		return version + "+nogit"
	}
	def latestCommits = grgit.log(paths: [rootProject.projectDir.toPath().relativize(project.projectDir.toPath()).toString()], maxCommits: 1)
	if (latestCommits.isEmpty()) {
		return version + "+uncommited"
	} else {
		return version + "+" + latestCommits.get(0).id.substring(0, 8) +
				DigestUtils.sha256Hex("${project.mc_version}").substring(0, 2)
	}
}

def getBranch() {
	if (System.getenv().GIT_BRANCH) {
		def branch = System.getenv().GIT_BRANCH
		return branch.substring(branch.lastIndexOf("/") + 1)
	}
	if (grgit == null) {
		return "unknown"
	}
	def branch = grgit.branch.current().name
	return branch.substring(branch.lastIndexOf("/") + 1)
}

def static setupRepositories(RepositoryHandler repositories) {
	def ENV = System.getenv()
	if (ENV.MAVEN_PUBLISH_TOKEN) {
		repositories.maven {
			url 'https://maven.legacyfabric.net/'
			credentials {
				username 'legacyfabric-ci'
				password ENV.MAVEN_PUBLISH_TOKEN
			}
			authentication {
				basic(BasicAuthentication)
			}
		}
	}
}

def moduleDependencies(project, List<String> depNames) {
	def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it", configuration: 'namedElements') }
	project.dependencies {
		deps.each {
			api it
		}
	}

	// As we manually handle the maven artifacts, we need to also manually specify the deps.
	project.publishing {
		publications {
			mavenJava(MavenPublication) {
				pom.withXml {
					def depsNode = asNode().appendNode("dependencies")
					deps.each {
						def depNode = depsNode.appendNode("dependency")
						depNode.appendNode("groupId", it.group)
						depNode.appendNode("artifactId", it.name)
						depNode.appendNode("version", it.version)
						depNode.appendNode("scope", "compile")
					}
				}
			}
		}
	}
}

allprojects {
	apply plugin: "java-library"
	apply plugin: 'checkstyle'
	apply plugin: 'maven-publish'
	apply plugin: 'signing'
	apply plugin: 'fabric-loom'
	apply plugin: 'org.cadixdev.licenser'

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	group = "net.legacyfabric.legacy-fabric-api"

	repositories {
		maven { url "https://maven.legacyfabric.net/" }
	}

	loom {
		shareRemapCaches = true

		setIntermediaryUrl('https://maven.legacyfabric.net/net/fabricmc/intermediary/%1$s/intermediary-%1$s-v2.jar');
		customMinecraftManifest.set("https://meta.legacyfabric.net/v2/manifest/${mc_version}")
	}

	dependencies {
		minecraft("com.mojang:minecraft:${project.mc_version}")
		mappings("net.fabricmc:yarn:${project.mc_version}+build.${project.yarn_version}:v2")
		modApi("net.fabricmc:fabric-loader:${project.loader_version}")

		implementation 'com.mojang:brigadier:1.0.17'

		if (System.getProperty("os.name").toLowerCase().contains("mac")) {
			implementation 'org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209'
			implementation 'org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209'
			implementation 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
		}
	}

	if (System.getProperty("os.name").toLowerCase().contains("mac")) {
		configurations.all {
			resolutionStrategy {
				dependencySubstitution {
					substitute module('org.lwjgl.lwjgl:lwjgl_util:2.9.2-nightly-201408222') with module('org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209')
					substitute module('org.lwjgl.lwjgl:lwjgl:2.9.2-nightly-201408222') with module('org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209')
				}
				force 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
			}
		}
	}

	processResources {
		inputs.property "version", project.base_version

		filesMatching("fabric.mod.json") {
			expand "version": project.base_version
		}
	}

	license {
		header rootProject.file('HEADER')
		include '**/*.java'
		exclude '**/lib/sponge/*.java'
		exclude '**/lib/sponge/**/*.java'
	}

	java {
		withSourcesJar()
	}

	checkstyle {
		configFile = rootProject.file("checkstyle.xml")
		toolVersion = '9.1'
	}

	tasks.withType(Checkstyle) {
		exclude '**/net/legacyfabric/fabric/test/**'
	}

	tasks.withType(AbstractArchiveTask) {
		preserveFileTimestamps = false
		reproducibleFileOrder = true
	}
}

javadoc {
	options {
		source = "8"
		encoding = 'UTF-8'
		charSet = 'UTF-8'
		memberLevel = JavadocMemberLevel.PACKAGE
		links(
				'https://guava.dev/releases/21.0/api/docs/',
				'https://asm.ow2.io/javadoc/',
				'https://docs.oracle.com/javase/8/docs/api/',
				'https://jenkins.liteloader.com/job/Mixin/javadoc/',
				'https://logging.apache.org/log4j/2.x/log4j-api/apidocs/'
				// Need to add minecraft jd publication etc once there is one available
		)
		// Disable the crazy super-strict doclint tool in Java 8
		addStringOption('Xdoclint:none', '-quiet')
	}
	allprojects.each {
		source(it.sourceSets.main.allJava.srcDirs)
	}
	classpath = sourceSets.main.compileClasspath
	include("**/api/**")
	failOnError false
}

task javadocJar(type: Jar) {
	dependsOn javadoc
	from javadoc.destinationDir
	//Set as `fatjavadoc` to prevent an ide form trying to use this javadoc, over using the modules javadoc
	archiveClassifier = "fatjavadoc"
}
build.dependsOn javadocJar

subprojects {
	if (project.name != project.testmods_project) {
		publishing {
			publications {
				mavenJava(MavenPublication) {
					afterEvaluate {
						artifact(remapJar) {
							builtBy remapJar
						}

						artifact(remapSourcesJar) {
							builtBy remapSourcesJar
						}
					}
				}
			}

			setupRepositories(repositories)
		}

		javadoc.enabled = false

		afterEvaluate {
			// Disable the gen sources task on sub projects
			genSourcesWithFernFlower.enabled = false
			genSourcesWithCfr.enabled = false
		}
	}
}

task remapMavenJar(type: net.fabricmc.loom.task.RemapJarTask, dependsOn: jar) {
	input = jar.archiveFile
	archiveFileName = "${archivesBaseName}-${project.version}-maven.jar"
	addNestedDependencies = false
}

build.dependsOn remapMavenJar

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(remapMavenJar) {
				builtBy remapMavenJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}

			artifact javadocJar
			pom.withXml {
				def depsNode = asNode().appendNode("dependencies")
				subprojects.each {
					if (it.name != project.testmods_project) {
						def depNode = depsNode.appendNode("dependency")
						depNode.appendNode("groupId", it.group)
						depNode.appendNode("artifactId", it.name)
						depNode.appendNode("version", it.version)
						depNode.appendNode("scope", "compile")
					}
				}
			}
		}
	}

	setupRepositories(repositories)
}

task licenseFormatAll
subprojects { p -> licenseFormatAll.dependsOn("${p.path}:licenseFormat") }
subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }

dependencies {
	afterEvaluate {
		subprojects.each {
			if (it.name != project.testmods_project) {
				api project(path: ":${it.name}", configuration: "namedElements")
			}
		}
	}
}

remapJar {
	afterEvaluate {
		subprojects.each {
			if (it.name == project.testmods_project) return

			// Include the signed or none signed jar from the sub project.
			nestedJars.from project("${it.name}:").tasks.getByName("remapJar")
		}
	}
}

curseforge {
	if (project.hasProperty('curse_api_key')) {
		apiKey = project.getProperty('curse_api_key')
	} else if (ENV.CURSE_API_KEY) {
		apiKey = ENV.CURSE_API_KEY
	}
	project {
		id = '400281'
		changelog = 'A changelog can be found at https://github.com/Legacy-Fabric/fabric/commits'
		releaseType = 'beta'
		addGameVersion '1.8.9'
		addGameVersion 'Fabric'
		mainArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")) {
			displayName = "[${project.mc_version}] Legacy Fabric API ${project.base_version}"
		}
		afterEvaluate {
			uploadTask.dependsOn("remapJar")
		}
	}
	options {
		forgeGradleIntegration = false
	}
}
