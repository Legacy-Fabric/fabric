plugins {
	id 'java'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'fabric-loom' version "0.7-SNAPSHOT" apply false
	// id 'org.cadixdev.licenser' version "0.6.1"
	// id "org.ajoberstar.grgit" version "3.1.1"
	// id 'com.matthewprenger.cursegradle' version "1.4.0" apply false
	// id 'signing'
}

class MinecraftVersion {
	String mcVersion
	String yarnVersion

	MinecraftVersion(String mcVersion, String yarnVersion) {
		this.mcVersion = mcVersion
		this.yarnVersion = yarnVersion
	}
}

class Globals {
	static def versions = [
		new MinecraftVersion("1.8.9", "202110221052"),
		new MinecraftVersion("1.12.2", "202110021304")
	]
}

def MinecraftVersion getMinecraftVersion(String project_name) {
	def version_info = Globals.versions[0]
	for (MinecraftVersion minecraftVersion : Globals.versions) {
		if (project_name.startsWith(minecraftVersion.mcVersion)) version_info = minecraftVersion
	}
	return version_info
}

setVersion("$project.base_version")

def ENV = System.getenv()

def static setupRepositories(RepositoryHandler repositories) {
	def ENV = System.getenv()
	if (ENV.MAVEN_PUBLISH_TOKEN) {
		repositories.maven {
			url 'https://maven.legacyfabric.net/'
			credentials {
				username 'BobTheBuildSlave'
				password ENV.MAVEN_PUBLISH_TOKEN
			}
			authentication {
				basic(BasicAuthentication)
			}
		}
	}
}

def moduleDependencies(proj, List<String> names) {
	def version = proj.name
	def deps = names.iterator().collect { project.dependencies.project(path: ":$version" + "_$it", configuration: 'dev') }
	proj.dependencies {
		deps.each {
			System.out.println(it);
			include it
		}
	}
}

def subModuleDependencies(proj, List<String> names) {
	def version = proj.name.split("_")[0]
	def deps = names.iterator().collect { project.dependencies.project(path: ":$version" + "_$it", configuration: 'dev') }
	proj.dependencies {
		deps.each {
			System.out.println(it);
			implementation it
		}
	}
}

def subModuleCommonDependencies(proj, List<String> names) {
	def deps = names.iterator().collect { project.dependencies.project(path: ":common_$it", configuration: 'dev') }
	proj.dependencies {
		deps.each {
			System.out.println(it);
			implementation it
		}
	}
}

subprojects {
    // apply plugin: 'checkstyle'
	apply plugin: 'maven-publish'
	// apply plugin: 'signing'
	apply plugin: 'fabric-loom'
	// apply plugin: 'org.cadixdev.licenser'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group = "net.legacyfabric.legacy-fabric-api"

    repositories {
		maven { url "https://maven.legacyfabric.net/" }
	}

	minecraft {
		intermediaryUrl = {
			return "https://maven.legacyfabric.net/net/fabricmc/intermediary/" + it + "/intermediary-" + it + "-v2.jar"
		}
	}

	def mc_info = getMinecraftVersion(it.name)
	def mc_version = mc_info.mcVersion
	def yarn_version = mc_info.yarnVersion

    dependencies {
		minecraft "com.mojang:minecraft:${mc_version}"
		mappings "net.fabricmc:yarn:${mc_version}+build.${yarn_version}:v2"
		modImplementation "net.fabricmc:fabric-loader:0.12.5"

        if (System.getProperty("os.name").toLowerCase().contains("mac")) {
			implementation 'org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209'
			implementation 'org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209'
			implementation 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
		}
    }

    configurations {
		dev
	}

    if (System.getProperty("os.name").toLowerCase().contains("mac")) {
		configurations.all {
			resolutionStrategy {
				dependencySubstitution {
					substitute module('org.lwjgl.lwjgl:lwjgl_util:2.9.2-nightly-201408222') with module('org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209')
					substitute module('org.lwjgl.lwjgl:lwjgl:2.9.2-nightly-201408222') with module('org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209')
				}
				force 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
			}
		}
	}

    jar {
		classifier("dev")
	}

	afterEvaluate {
		remapJar {
			input = file("${project.buildDir}/libs/$archivesBaseName-${project.version}-dev.jar")
			archiveName("${archivesBaseName}-${project.version}.jar")
		}

		artifacts {
			dev file: file("${project.buildDir}/libs/$archivesBaseName-${project.version}-dev.jar"), type: "jar", builtBy: jar
		}

		processResources {
			inputs.property "version", project.base_version

			filesMatching("fabric.mod.json") {
				expand "version": project.base_version
			}
		}
	}

    task sourcesJar(type: Jar, dependsOn: classes) {
		classifier('sources')
		from sourceSets.main.allSource
	}

    if (false) {
        javadoc {
            options {
                source = "8"
                encoding = 'UTF-8'
                charSet = 'UTF-8'
                memberLevel = JavadocMemberLevel.PACKAGE
                links(
                        'https://guava.dev/releases/21.0/api/docs/',
                        'https://asm.ow2.io/javadoc/',
                        'https://docs.oracle.com/javase/8/docs/api/',
                        'https://jenkins.liteloader.com/job/Mixin/javadoc/',
                        'https://logging.apache.org/log4j/2.x/log4j-api/apidocs/'
                        // Need to add minecraft jd publication etc once there is one available
                )
                // Disable the crazy super-strict doclint tool in Java 8
                addStringOption('Xdoclint:none', '-quiet')
            }
            allprojects.each {
                source(it.sourceSets.main.allJava.srcDirs)
            }
            classpath = sourceSets.main.compileClasspath
            include("**/api/**")
            failOnError false
        }

        task javadocJar(type: Jar) {
            dependsOn javadoc
            from javadoc.destinationDir
            //Set as `fatjavadoc` to prevent an ide form trying to use this javadoc, over using the modules javadoc
            classifier('fatjavadoc')
        }
        build.dependsOn javadocJar


        task remapMavenJar(type: RemapJarTask, dependsOn: jar) {
            afterEvaluate {
                input = file("${project.buildDir}/libs/${archivesBaseName}-${project.version}-dev.jar")
                archiveName("${archivesBaseName}-${project.version}-maven.jar")
                addNestedDependencies = false
            }
        }

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}-maven.jar")) {
                        builtBy remapMavenJar
                    }
                    artifact(sourcesJar) {
                        builtBy remapSourcesJar
                    }

                    artifact javadocJar
                    pom.withXml {
                        def depsNode = asNode().appendNode("dependencies")
                        subprojects.each {
                            if (it.name != project.testmods_project) {
                                def depNode = depsNode.appendNode("dependency")
                                depNode.appendNode("groupId", it.group)
                                depNode.appendNode("artifactId", it.name)
                                depNode.appendNode("version", it.version)
                                depNode.appendNode("scope", "compile")
                            }
                        }
                    }
                }
            }
            repositories {
                if (ENV.MAVEN_PUBLISH_TOKEN) {
                    maven {
                        url 'https://maven.legacyfabric.net/'
                        credentials {
                            username 'BobTheBuildSlave'
                            password ENV.MAVEN_PUBLISH_TOKEN
                        }
                        authentication {
                            basic(BasicAuthentication)
                        }
                    }
                }
            }
        }

		if (project.name != project.testmods_project) {
			task remapMavenJar(type: Copy, dependsOn: remapJar) {
				afterEvaluate {
					from("${project.buildDir}/libs/$archivesBaseName-${version}.jar")
					into("${project.buildDir}/libs/")
					rename { String fn -> "$archivesBaseName-${version}-maven.jar" }
				}
			}

			publishing {
				publications {
					mavenJava(MavenPublication) {
						afterEvaluate {
							artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}-maven.jar")) {
								builtBy remapMavenJar
							}

							artifact(sourcesJar) {
								builtBy remapSourcesJar
							}
						}
					}
				}

				setupRepositories(repositories)
			}
			javadoc.enabled = false
		}
    }
}

//subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }
