plugins {
	id 'java'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'fabric-loom' version '0.6-SNAPSHOT'
	id 'net.minecrell.licenser' version '0.4.1'
	id "org.ajoberstar.grgit" version "3.1.1"
	id 'com.matthewprenger.cursegradle' version "1.4.0"
	id 'maven'
	id 'signing'
}
def ENV = System.getenv()

def ENV = System.getenv()

class Globals {
	static def baseVersion = "1.1.0"
	static def mcVersion = "1.12.2"
	static def yarnVersion = "+build.202104240803"
	static def testmodsProject = "testmods"
}

version = Globals.baseVersion + "+" + Globals.mcVersion
logger.lifecycle("Building Fabric: " + version)


import net.fabricmc.loom.task.RunClientTask
import net.fabricmc.loom.task.RunServerTask
import org.apache.commons.codec.digest.DigestUtils

def getSubprojectVersion(project, version) {
	if (grgit == null) {
		return version + "+nogit"
	}
	def latestCommits = grgit.log(paths: [rootProject.projectDir.toPath().relativize(project.projectDir.toPath()).toString()], maxCommits: 1)
	if (latestCommits.isEmpty()) {
		return version + "+uncommited"
	}

	return version + "+" + latestCommits.get(0).id.substring(0, 8) + DigestUtils.sha256Hex(Globals.mcVersion).substring(0, 2)
}

def getBranch() {
	def ENV = System.getenv()
	if (ENV.GITHUB_REF) {
		def branch = ENV.GITHUB_REF
		return branch.substring(branch.lastIndexOf("/") + 1)
	}

	if (grgit == null) {
		return "unknown"
	}

	def branch = grgit.branch.current().name
	return branch.substring(branch.lastIndexOf("/") + 1)
}

def setupRepositories(RepositoryHandler repositories) {
	def ENV = System.getenv()
	if (ENV.MAVEN_PUBLISH_TOKEN) {
		repositories.maven {
			url 'https://maven.legacyfabric.net/'
			credentials {
				username 'BobTheBuildSlave'
				password ENV.MAVEN_PUBLISH_TOKEN
			}
			authentication {
				basic(BasicAuthentication)
			}
		}
	}
}

allprojects {
	apply plugin: "checkstyle"
	apply plugin: "maven-publish"
	apply plugin: "fabric-loom"
	apply plugin: "com.jfrog.bintray"
	apply plugin: "net.minecrell.licenser"

	tasks.withType(JavaCompile).configureEach {
		def targetVersion = 8
		if (JavaVersion.current().isJava9Compatible()) {
			it.options.release = targetVersion
		} else {
			sourceCompatibility = JavaVersion.toVersion(targetVersion)
			targetCompatibility = JavaVersion.toVersion(targetVersion)
		}
	}

	group = "net.legacyfabric.legacy-fabric-api"

	task runTestmodClient(type: RunClientTask) {
		classpath sourceSets.testmod.runtimeClasspath
	}

	task runTestmodServer(type: RunServerTask) {
		classpath sourceSets.testmod.runtimeClasspath
	}

	repositories {
		maven { url "https://maven.legacyfabric.net/" }
	}

	minecraft {
		intermediaryUrl = {
			return "https://maven.legacyfabric.net/net/fabricmc/intermediary/" + it + "/intermediary-" + it + "-v2.jar";
		}
	}

	dependencies {
		compile "com.google.guava:guava:23.5-jre"
		minecraft "com.mojang:minecraft:$Globals.mcVersion"
		mappings "net.fabricmc:yarn:${Globals.mcVersion}${Globals.yarnVersion}:v2"
		modCompile("net.fabricmc:fabric-loader:0.11.3") {
			exclude module: "guava"
		}

		implementation 'com.mojang:brigadier:1.0.17'

		// if (System.getProperty("os.name").toLowerCase().contains("mac")) {
		// 	implementation 'org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209'
		// 	implementation 'org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209'
		// 	implementation 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
		// }
	}

	configurations {
		dev
	}

	// if (System.getProperty("os.name").toLowerCase().contains("mac")) {
	// 	configurations.all {
	// 		resolutionStrategy {
	// 			dependencySubstitution {
	// 				substitute module('org.lwjgl.lwjgl:lwjgl_util:2.9.2-nightly-201408222') with module('org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209')
	// 				substitute module('org.lwjgl.lwjgl:lwjgl:2.9.2-nightly-201408222') with module('org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209')
	// 			}
	// 			force 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
	// 		}
	// 	}
	// }

	jar {
		classifier = "dev"
	}

	afterEvaluate {
		remapJar {
			input = file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar")
			archiveName = "${archivesBaseName}-${version}.jar"
		}

		artifacts {
			dev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar"), type: "jar", builtBy: jar
		}

		processResources {
			inputs.property "version", project.version

			from(sourceSets.main.resources.srcDirs) {
				include "fabric.mod.json"
				expand "version": project.version
			}

			from(sourceSets.main.resources.srcDirs) {
				exclude "fabric.mod.json"
			}
		}

		license {
			header = rootProject.file('HEADER')
			include '**/*.java'
		}
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		archiveClassifier = "sources"
		from sourceSets.main.allSource
	}

	checkstyle {
		configFile = rootProject.file("checkstyle.xml")
		toolVersion = "8.31"
	}

	tasks.withType(Checkstyle) {
		exclude '**/net/legacyfabric/fabric/test/**'
	}
}

javadoc {
	options {
		source = "8"
		encoding = "UTF-8"
		charSet = "UTF-8"
		memberLevel = JavadocMemberLevel.PACKAGE
		links(
				'https://guava.dev/releases/21.0/api/docs/',
				'https://asm.ow2.io/javadoc/',
				'https://docs.oracle.com/javase/8/docs/api/',
				'https://jenkins.liteloader.com/job/Mixin/javadoc/',
				'https://logging.apache.org/log4j/2.x/log4j-api/apidocs/'
				// Need to add minecraft jd publication etc once there is one available
		)
		// Disable the crazy super-strict doclint tool in Java 8
		addStringOption("Xdoclint:none", "-quiet")
	}

	allprojects.each {
		source(it.sourceSets.main.allJava.srcDirs)
	}

	classpath = sourceSets.main.compileClasspath
	include("**/api/**")
	failOnError false
}

task javadocJar(type: Jar) {
	dependsOn javadoc
	from javadoc.destinationDir
	//Set as `fatjavadoc` to prevent an ide form trying to use this javadoc, over using the modules javadoc
	archiveClassifier = "fatjavadoc"
}

build.dependsOn javadocJar

// Runs a dedicated headless server with all test mods that closes once complete.
task runAutoTestServer(type: RunServerTask) {
	project.subprojects {
		classpath it.sourceSets.testmod.runtimeClasspath
	}
	jvmArgs "-Dfabric.autoTest"
	args "--nogui"
}

subprojects {
	if (project.name != Globals.testmodsProject) {
		task remapMavenJar(type: Copy, dependsOn: remapJar) {
			afterEvaluate {
				from("${project.buildDir}/libs/$archivesBaseName-${version}.jar")
				into("${project.buildDir}/libs/")
				rename { String fn -> "$archivesBaseName-${version}-maven.jar" }
			}
		}

		publishing {
			publications {
				mavenJava(MavenPublication) {
					afterEvaluate {
						artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}-maven.jar")) {
							builtBy remapMavenJar
						}

						artifact(sourcesJar) {
							builtBy remapSourcesJar
						}
					}
				}
			}

			setupRepositories(repositories)
		}
		javadoc.enabled = false
	}
}

task remapMavenJar(type: net.fabricmc.loom.task.RemapJarTask, dependsOn: jar) {
	afterEvaluate {
		input = file("${project.buildDir}/libs/${archivesBaseName}-${version}-dev.jar")
		archiveName = "${archivesBaseName}-${version}-maven.jar"
		addNestedDependencies = false
	}
}

subprojects.each {
	if (it.name != Globals.testmodsProject) {
		publish.dependsOn("${it.path}:publish")
	}
}


publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}-maven.jar")) {
				builtBy remapMavenJar
			}

			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}

			artifact javadocJar

			pom.withXml {
				def depsNode = asNode().appendNode("dependencies")
				subprojects.each {
					if (it.name != Globals.testmodsProject) {
						def depNode = depsNode.appendNode("dependency")
						depNode.appendNode("groupId", it.group)
						depNode.appendNode("artifactId", it.name)
						depNode.appendNode("version", it.version)
						depNode.appendNode("scope", "compile")
					}
				}
			}
		}
	}
	repositories {
		if (ENV.MAVEN_PUBLISH_TOKEN) {
			maven {
				url 'https://maven.legacyfabric.net/'
				credentials {
					username 'BobTheBuildSlave'
					password ENV.MAVEN_PUBLISH_TOKEN
				}
				authentication {
					basic(BasicAuthentication)
				}
			}
		}
	}
}

task licenseFormatAll
subprojects { p -> licenseFormatAll.dependsOn("${p.path}:licenseFormat") }
subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }

dependencies {
	afterEvaluate {
		subprojects.each {
			if (it.name != Globals.testmodsProject) {
				implementation project(path: ":${it.name}", configuration: "dev")
				include project("${it.name}:")
			}
		}
	}
}

// A task to ensure that the version being released has not already been released.
task checkVersion {
	doFirst {
		def xml = new URL("http://dl.bintray.com/legacy-fabric/Legacy-Fabric-Maven/net/fabricmc/fabric-api/fabric-api/:maven-metadata.xml").text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			throw new RuntimeException("${version} has already been released!")
		}
	}
}

bintray {
	user = System.getenv('BINTRAY_USER')
	key = System.getenv('BINTRAY_KEY')
	publications = ["${archivesBaseName}_mavenJava"]
	publish = true
	pkg {
		repo = "Legacy-Fabric-Maven"
		name = "fabric"
		userOrg = "legacy-fabric"
		licenses = ["Apache-2.0"]
		version {
			released = new Date()
			githubRepo = 'Legacy-Fabric/fabric'
			websiteUrl = 'https://github.com/Legacy-Fabric/fabric'
			issueTrackerUrl = 'https://github.com/Legacy-Fabric/fabric/issues'
			vcsUrl = 'https://github.com/Legacy-Fabric/fabric.git'
			gpg {
				sign = true
			}
		}
	}
}

curseforge {
	if (project.hasProperty('curse_api_key')) {
		apiKey = project.getProperty('curse_api_key')
	} else if (ENV.CURSE_API_KEY) {
		apiKey = ENV.CURSE_API_KEY
	}
	project {
		id = '400281'
		changelog = 'A changelog can be found at https://github.com/Legacy-Fabric/fabric/commits'
		releaseType = 'beta'
		addGameVersion '1.12.2'
		addGameVersion 'Fabric'
		mainArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")) {
			displayName = "[$Globals.mcVersion] Legacy Fabric API $Globals.baseVersion"
		}
		afterEvaluate {
			uploadTask.dependsOn("remapJar")
		}
	}
	options {
		forgeGradleIntegration = false
	}
}
