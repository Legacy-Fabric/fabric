buildscript {
	dependencies {
		classpath "org.kohsuke:github-api:1.135"
	}
}

plugins {
	id "java-library"
	id "eclipse"
	id "idea"
	id "maven-publish"
	id "fabric-loom" version "1.3.9" apply false
	id "legacy-looming" version "1.3.75" apply false
	id "com.diffplug.spotless" version "6.18.0"
	id "org.ajoberstar.grgit" version "3.1.1"
	id "com.matthewprenger.cursegradle" version "1.4.0"
	id "com.modrinth.minotaur" version "2.8.2"
	id "signing"
}

def ENV = System.getenv()

setVersion("${project.base_version}")
logger.lifecycle("Building Fabric: " + version)

import net.fabricmc.loom.task.RemapJarTask
import org.apache.commons.codec.digest.DigestUtils
import org.kohsuke.github.GHReleaseBuilder

def getSubprojectVersion(project) {
	def version
	if (project.name == "legacyfabric-api") version = project.base_version
	else version = project[project.name.replace("-common", "") + ".version"]

	if (project.getParent().name != "common") {
		version = version + "+" + project.getParent().name
	}

	if (project.name == "legacyfabric-api") return version

	if (grgit == null) {
		return version + "+nogit"
	}
	def latestCommits = grgit.log(paths: [rootProject.projectDir.toPath().relativize(project.projectDir.toPath()).toString()], maxCommits: 1)
	if (latestCommits.isEmpty()) {
		return version + "+uncommited"
	} else {
		return version + "+" + latestCommits.get(0).id.substring(0, 8) +
			DigestUtils.sha256Hex("${project.getParent().name}").substring(0, 2)
	}
}

def getBranch() {
	if (ENV.GIT_BRANCH) {
		def branch = ENV.GIT_BRANCH
		return branch.substring(branch.lastIndexOf("/") + 1)
	}

	if (grgit == null) {
		return "unknown"
	}

	def branch = grgit.branch.current().name
	return branch.substring(branch.lastIndexOf("/") + 1)
}

def static setupRepositories(RepositoryHandler repositories) {
	def ENV = System.getenv()
	if (ENV.MAVEN_PUBLISH_CREDENTIALS) {
		repositories.maven {
			url "https://repo.legacyfabric.net/repository/legacyfabric"
			credentials {
				username ENV.MAVEN_PUBLISH_CREDENTIALS.split(":")[0]
				password ENV.MAVEN_PUBLISH_CREDENTIALS.split(":")[1]
			}
			authentication {
				basic(BasicAuthentication)
			}
		}
	}
}

def moduleDependencies(project, List<String> depNames) {
	def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it", configuration: "namedElements") }
	def testOutputs = depNames.iterator().collect { findProject(":$it").sourceSets.testmod.output }

	project.dependencies {
		deps.each {
			api it
		}

		testOutputs.each {
			testmodImplementation it
		}
	}

	if (project.name != "legacy-fabric-logger-api-v1") {
		deps.add(project.dependencies.project(path: ":common:legacy-fabric-logger-api-v1", configuration: "namedElements"))
	}

	// As we manually handle the maven artifacts, we need to also manually specify the deps.
	project.publishing {
		publications {
			mavenJava(MavenPublication) {
				if (project.name == "legacyfabric-api") {
					artifactId = "legacy-fabric-api"
				}

				pom.withXml {
					def depsNode = asNode().appendNode("dependencies")
					deps.each {
						def depNode = depsNode.appendNode("dependency")
						depNode.appendNode("groupId", it.group)
						depNode.appendNode("artifactId", it.name)
						depNode.appendNode("version", it.version)
						depNode.appendNode("scope", "compile")
					}
				}
			}
		}
	}
}

def moduleDependencies(project, Map<String, List<String>> depMap) {
	def depNames = depMap.entrySet().iterator().collect {entry ->
		def moduleMC = entry.getKey()
		def modules = entry.getValue();

		return modules.collect {"$moduleMC:$it"}
	}.flatten()

	def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it", configuration: "namedElements") }
	def testOutputs = depNames.iterator().collect { findProject(":$it").sourceSets.testmod.output }

	project.dependencies {
		deps.each {
			api it
		}

		testOutputs.each {
			testmodImplementation it
		}
	}

	if (project.name != "legacy-fabric-logger-api-v1") {
		deps.add(project.dependencies.project(path: ":common:legacy-fabric-logger-api-v1", configuration: "namedElements"))
	}

	// As we manually handle the maven artifacts, we need to also manually specify the deps.
	project.publishing {
		publications {
			mavenJava(MavenPublication) {
				if (project.name == "legacyfabric-api") {
					artifactId = "legacy-fabric-api"
				}

				pom.withXml {
					def depsNode = asNode().appendNode("dependencies")
					deps.each {
						def depNode = depsNode.appendNode("dependency")
						depNode.appendNode("groupId", it.group)
						depNode.appendNode("artifactId", it.name)
						depNode.appendNode("version", it.version)
						depNode.appendNode("scope", "compile")
					}
				}
			}
		}
	}
}

class MinecraftVersion {
	public String mc_version
	public boolean userProperties

	private MinecraftVersion(String mc_version) {
		this(mc_version, false)
	}

	private MinecraftVersion(String mc_version, boolean userProperties) {
		this.mc_version = mc_version
		this.userProperties = userProperties
	}

	public static MinecraftVersion[] VERSIONS = new MinecraftVersion[]{
		new MinecraftVersion("1.12.2"),
		new MinecraftVersion("1.11.2"),
		new MinecraftVersion("1.10.2"),
		new MinecraftVersion("1.9.4"),
		new MinecraftVersion("1.8.9"),
		new MinecraftVersion("1.8", true),
		new MinecraftVersion("1.7.10", true)
	}
}

static def getVersionInfo(Project project) {
	MinecraftVersion version = MinecraftVersion.VERSIONS[0]

	Project parent = project.getParent()
	String projectMCVersion = project.name

	if (parent != null && parent.name != "legacy-fabric-api") {
		projectMCVersion = parent.name
	}

	System.out.println("Preparing project ${parent != null ? parent.name : ""}:$project.name")

	for (MinecraftVersion mcVersion : MinecraftVersion.VERSIONS) {
		if (mcVersion.mc_version == projectMCVersion) {
			version = mcVersion
			break
		} else if (mcVersion.mc_version == "1.8.9") {
			version = mcVersion
		}
	}

	return version
}

allprojects {
	group = "net.legacyfabric.legacy-fabric-api"

	apply plugin: "java-library"
	apply plugin: "checkstyle"
	apply plugin: "maven-publish"
	apply plugin: "signing"
	apply plugin: "fabric-loom"
	apply plugin: "legacy-looming"
	apply plugin: "com.diffplug.spotless"

	tasks.withType(GenerateModuleMetadata) {
		enabled = false
	}

	publishing {
		setupRepositories(repositories)
	}

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	tasks.withType(JavaCompile).configureEach {
		it.options.release = 8
	}

	java {
		// Must be added before the split source sets are setup.
		withSourcesJar()
	}

	sourceSets {
		testmod {
			compileClasspath += main.compileClasspath
			runtimeClasspath += main.runtimeClasspath
		}
	}

	MinecraftVersion versionInfo = getVersionInfo(it)
	String projectName = it.name

	loom {
		runs {
			"testModClient$versionInfo.mc_version" {
				client()
				ideConfigGenerated projectName == "legacyfabric-api"
				name = "$versionInfo.mc_version Testmod Client"
				source sourceSets.testmod

				if (versionInfo.userProperties) {
					programArgs "--userProperties", "{}"
				}
			}

			"testModServer$versionInfo.mc_version" {
				server()
				ideConfigGenerated projectName == "legacyfabric-api"
				name = "$versionInfo.mc_version Testmod Server"
				source sourceSets.testmod
			}
		}
	}

	allprojects.each { p ->
		String parentName = p.getParent() != null ? "-" + p.getParent().name : ""

		if (p.file("src/main").exists()) {
			loom.mods.register(p.name + parentName) {
				sourceSet p.sourceSets.main
			}
		}

		if (p.file("src/testmod").exists()) {
			loom.mods.register(p.name + parentName + "-testmod") {
				sourceSet p.sourceSets.testmod
			}
		}
	}

	def currentOs = System.getProperty("os.name").toLowerCase(Locale.ENGLISH)

	dependencies {
		minecraft "com.mojang:minecraft:${versionInfo.mc_version}"
		mappings legacy.yarn(versionInfo.mc_version, project.yarn_mappings_build)
		modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

		implementation "com.mojang:brigadier:1.0.17"

		testmodImplementation sourceSets.main.output
	}

	tasks.withType(ProcessResources).configureEach {
		inputs.property "version", project.version

		filesMatching("fabric.mod.json") {
			expand "version": project.version
		}
	}

	spotless {
		java {
			licenseHeaderFile(rootProject.file("HEADER"))
		}
	}

	checkstyle {
		configFile = rootProject.file("checkstyle.xml")
		toolVersion = "10.11.0"
	}

	tasks.withType(AbstractArchiveTask) {
		preserveFileTimestamps = false
		reproducibleFileOrder = true
	}

	task testmodJar(type: Jar) {
		from sourceSets.testmod.output
		destinationDirectory = new File(project.buildDir, "devlibs")
		archiveClassifier.set("testmod")
	}

	[jar, sourcesJar].each {
		it.from(rootProject.file("LICENSE")) {
			rename { "${it}-${project.archivesBaseName}" }
		}
	}

	task remapTestmodJar(type: RemapJarTask, dependsOn: testmodJar) {
		input = testmodJar.archiveFile
		archiveClassifier.set("testmod")
		addNestedDependencies = false
	}
	build.dependsOn remapTestmodJar
}

remapTestmodJar {
	def testModJarTasks = []

	subprojects {
		if (!it.file("src/testmod").exists()) return

		testModJarTasks += it.tasks.remapTestmodJar
	}

	nestedJars.setFrom(testModJarTasks)
	addNestedDependencies = true
}

javadoc {
	options {
		failOnError = false
		source = "8"
		encoding = "UTF-8"
		charSet = "UTF-8"
		memberLevel = JavadocMemberLevel.PACKAGE
		links(
			"https://guava.dev/releases/21.0/api/docs/",
			"https://asm.ow2.io/javadoc/",
			"https://docs.oracle.com/javase/8/docs/api/",
			"https://jenkins.liteloader.com/job/Mixin/javadoc/",
			"https://logging.apache.org/log4j/2.x/log4j-api/apidocs/"
			// Need to add minecraft jd publication etc once there is one available
		)
		// Disable the crazy super-strict doclint tool in Java 8
		addStringOption("Xdoclint:none", "-quiet")
	}

	allprojects.each {
		source(it.sourceSets.main.allJava.srcDirs)
	}

	classpath = sourceSets.main.compileClasspath
	include("**/api/**")
	failOnError false
}

task javadocJar(type: Jar) {
	dependsOn javadoc
	from javadoc.destinationDir
	//Set as `fatjavadoc` to prevent an ide form trying to use this javadoc, over using the modules javadoc
	archiveClassifier.set("fatjavadoc")
}

build.dependsOn javadocJar

subprojects {
	dependencies {
		testmodImplementation sourceSets.main.output

		if (project.name != "legacy-fabric-logger-api-v1") {
			api project(path: ":common:legacy-fabric-logger-api-v1", configuration: "namedElements")
		}
	}

	def parent = project.getParent()

	if (parent == null || parent.name != "legacy-fabric-api") {
		publishing {
			publications {
				mavenJava(MavenPublication) {
					artifact(remapJar) {
						builtBy remapJar
					}
					artifact(remapSourcesJar) {
						builtBy remapSourcesJar
					}
				}
			}
		}

		// We manually handle the pom generation
		loom.disableDeprecatedPomGeneration(publishing.publications.mavenJava)
	}

	javadoc.enabled = false

	afterEvaluate {
		// Disable the gen sources task on sub projects
		genSourcesWithFernFlower.enabled = false
		genSourcesWithCfr.enabled = false

//		genClientOnlySourcesWithFernFlower.enabled = false
//		genClientOnlySourcesWithCfr.enabled = false
//		genCommonSourcesWithCfr.enabled = false
//		genCommonSourcesWithFernFlower.enabled = false
	}
}

publishing {
	publications {}
}

subprojects.each { if (it.file("src/main").exists()) remapJar.dependsOn("${it.path}:remapJar") }

sourceSets {
	testmod
}

dependencies {
	afterEvaluate {
		subprojects.each {
			String par = it.getParent() != null ? it.getParent().name + ":" : ""
			if (par == "legacy-fabric-api:" || (par.startsWith("1.") && it.name == "legacyfabric-api")) return
			if (it.file("src/main").exists()) api project(path: ":$par${it.name}", configuration: "namedElements")

			if (it.file("src/testmod").exists()) testmodImplementation project("$par${it.name}:").sourceSets.testmod.output
		}
	}
}

remapJar {
	afterEvaluate {
		subprojects.each {
			String par = it.getParent() != null ? it.getParent().name + ":" : ""
			if (par == "legacy-fabric-api:" || (par.startsWith("1.") && it.name == "legacyfabric-api")) return
			// Include the signed or none signed jar from the sub project.
			if (it.file("src/main").exists()) nestedJars.from project("$par${it.name}:").tasks.getByName("remapJar")
		}
	}
}

curseforge {
	if (project.hasProperty("curse_api_key")) {
		apiKey = project.getProperty("curse_api_key")
	} else if (ENV.CURSE_API_KEY) {
		apiKey = ENV.CURSE_API_KEY
	}
	project {
		id = "400281"
		changelog = "A changelog can be found at https://github.com/Legacy-Fabric/fabric/commits"
		releaseType = "release"
		addGameVersion "Fabric"

		MinecraftVersion.VERSIONS.each {
			addGameVersion it.mc_version
		}

		mainArtifact(remapJar) {
			displayName = "Legacy Fabric API ${project.base_version}"
		}

		afterEvaluate {
			uploadTask.dependsOn("remapJar")
		}
	}
	options {
		forgeGradleIntegration = false
	}
}


import org.kohsuke.github.GitHub

task github(dependsOn: remapJar) {
	onlyIf {
		ENV.GITHUB_TOKEN
	}

	doLast {
		def github = GitHub.connectUsingOAuth(ENV.GITHUB_TOKEN as String)
		def repository = github.getRepository(ENV.GITHUB_REPOSITORY)

		def releaseBuilder = new GHReleaseBuilder(repository, version as String)
		releaseBuilder.name("Legacy Fabric API $project.version")
		releaseBuilder.body("A changelog can be found at https://github.com/Legacy-Fabric/fabric/commits")
		releaseBuilder.commitish(getBranch())
		releaseBuilder.prerelease(false)

		def ghRelease = releaseBuilder.create()
		ghRelease.uploadAsset(remapJar.archiveFile.get().getAsFile(), "application/java-archive")
	}
}

modrinth {
	projectId = "legacy-fabric-api"

	versionNumber = "${project.version}"
	versionName = "Legacy Fabric API ${project.version}"
	versionType = "release"
	changelog = "A changelog can be found at https://github.com/Legacy-Fabric/fabric/commits"

	uploadFile = remapJar

	def vers = []
	MinecraftVersion.VERSIONS.each {
		vers.add it.mc_version
	}
	gameVersions = vers
	loaders = ["fabric"]
}

// A task to ensure that the version being released has not already been released.
task checkVersion {
	doFirst {
		def xml = new URL("https://maven.legacyfabric.net/net/legacyfabric/legacy-fabric-api/legacy-fabric-api/maven-metadata.xml").text
		def metadata = new groovy.xml.XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text()
		if (versions.contains(version)) {
			throw new RuntimeException("${version} has already been released!")
		}
	}
}

github.mustRunAfter checkVersion
//modrinth.mustRunAfter checkVersion
publish.mustRunAfter checkVersion
project.tasks.curseforge.mustRunAfter checkVersion
